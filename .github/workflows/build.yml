name: 'macOS DMG'

on:
  workflow_dispatch:
  push:
    branches:
      - 'none'
    paths-ignore:
      - 'docs/**'
      - "*.md"

env:
  APPNAME: USBImager
  HOMEBREW_NO_INSTALL_CLEANUP: true
  HOMEBREW_NO_ENV_HINTS: true
  HOMEBREW_CLEANUP_MAX_AGE_DAYS: 999
  HOMEBREW_NO_ANALYTICS: true
  HOMEBREW_NO_AUTO_UPDATE: true

jobs:
  build_macos_linux:
    runs-on: ${{ matrix.os }}

    strategy:
      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
      matrix:
        os: ['macos-13', 'macos-14', 'ubuntu-latest', 'windows-2022']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
          fetch-tags: true
          
      - name: Update brew
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        run: |
          brew update
          
      - name: Install brew dependencies
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        run: |
          brew install \
             intltool \
             create-dmg

      - name: set vars
        id: envconf
        run: |
          echo "VERSION=$(git describe --abbrev=0)" >> $GITHUB_ENV
          echo "TAG=$(git describe)" >> $GITHUB_ENV          

      - name: Make macos/linux
        if: matrix.os != 'windows-2022'
        working-directory: ./src
        run: make package

      - name: Make deb
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./src
        run: make deb

      - name: windows prepare env
        if: matrix.os == 'windows-2022'
        uses: microsoft/setup-msbuild@v2
        # with:
        #   vs-version: '[17,)'

      - name: windows deps
        if: matrix.os == 'windows-2022'
        # https://github.com/jmazanec15/k-NN-1/blob/e15d4724a10e755f2c0849dae73df7ba7890bdde/.github/workflows/CI.yml#L142
        run: |
          echo "C:/Users/runneradmin/scoop/shims" >> $env:GITHUB_PATH
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          vcpkg install zlib 
          # scoop bucket add extras
          # scoop install zlib
          # regedit /s "C:\\Users\\runneradmin\\scoop\\apps\\zlib\\current\\register.reg"        

      - name: windows make
        if: matrix.os == 'windows-2022'
        working-directory: src
        shell: pwsh
        run: |
          & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' `
            -SkipAutomaticLocation -Arch amd64 -HostArch amd64
          New-Item -Path "C:\tmp" -ItemType Directory -Force
          New-Item -Path "D:\tmp" -ItemType Directory -Force
          make package     

      - name: Upload Artifacts zip
        uses: actions/upload-artifact@v4
        with:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          overwrite: true
          name: ${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.zip
            **/*.deb
            **/*.exe
            
  # build_windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-2022]
  #   steps:
  #     - uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ matrix.qt_ver }}
  #         arch: win64_msvc2019_64
  #         modules: qtwebengine qtwebchannel qtpositioning qt5compat qtmultimedia qtimageformats qtspeech
  #         setup-python: 'false'
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Build
  #       id: build
  #       run: |
  #         # Launch-VsDevShell also provides Ninja
  #         & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' `
  #           -SkipAutomaticLocation -Arch amd64 -HostArch amd64
  #         New-Item -Path './build_dir' -ItemType Directory
          
  #         # RelWithDebInfo + msvc's = .pdb file beside program file.
  #         cmake -S . -B "./build_dir" `
  #           -G Ninja `
  #           -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" `
  #           -DCMAKE_BUILD_TYPE=RelWithDebInfo `
  #           -DWITH_FFMPEG_PLAYER=OFF `
  #           -DWITH_VCPKG_BREAKPAD=ON
  #         cmake --build "./build_dir"
  #     - name: Package
  #       run: |
  #         cd './build_dir'
  #         cpack --verbose --trace
  #         cd ..

      # DMG create fails intermittently: https://github.com/actions/runner-images/issues/7522
      # - name: Unzip app
      #   run: unzip -o *.zip

      # - name: Create DMG
      #   if: true
      #   run: |
      #     create-dmg --volname "${{ env.APPNAME }}" --volicon src/misc/usbimager.icns --eula LICENSE  --app-drop-link 50 50 "${{ env.APPNAME }}-${{ env.TAG }}.dmg" "${{ env.APPNAME }}.app"

      # - name: Upload Artifacts DMG
      #   if: true
      #   uses: actions/upload-artifact@v4
      #   with:
      #     overwrite: true
      #     # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
      #     # branch name: ${{ github.ref_name }}
      #     name: DMG-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
      #     path: |
      #       **/*.dmg
        
