name: build and release

on:
  workflow_dispatch:
    inputs:
      custom_ref:
        description: 'Latest tag if empty, or custom ref|branch|tag'
        required: false
      skip_release:
        description: 'SKIP creating a release from artifacts: "y" to skip'
        required: false
  push:
    branches:
      - 'none'
    paths-ignore:
      - 'docs/**'
      - '*.md'

env:
  APPNAME: USBImager
  HOMEBREW_NO_INSTALL_CLEANUP: true
  HOMEBREW_NO_ENV_HINTS: true
  HOMEBREW_CLEANUP_MAX_AGE_DAYS: 999
  HOMEBREW_NO_ANALYTICS: true
  HOMEBREW_NO_AUTO_UPDATE: true
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true
  
jobs:
  build_mac_linux:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['macos-13', 'macos-14', 'ubuntu-latest']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.custom_ref || 'master'}}
          fetch-depth: 0
          fetch-tags: true
          
      # - name: Update brew (needed for DMG creation)
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
      #     brew update
      #     brew install create-dmg

      - name: set tag
        id: envconf
        run: |
          echo "TAG=$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV

      - name: Make macos
        if: startsWith(matrix.os, 'macos')
        working-directory: ./src
        run: |
          make all package

      - name: Upload macos artifacts
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.zip

      - name: Install linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install --no-install-recommends -y libudisks2-dev libgtk-3-dev libglib2.0-dev
        
      - name: "1a: Make ubuntu GTK3 deb"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ./src
        run: |
          USE_GTK=1 USE_UDISKS2=1 make all deb
          
      - name: "1b: Upload DEB artifact"
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.deb
            
      - name: "2a: Make X11 zip"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ./src
        run: |      
          make clean
          find . -iname '*.zip' -delete -print
          make all package

      - name: "2b: Upload X11 zip artifact"
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: zip-x11-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.zip

      - name: "3a: Make X11 unifont zip"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ./src
        run: |      
          make clean
          find . -iname '*.zip' -delete -print
          USE_UNIFONT=1 make all package

      - name: "3b: Upload X11 unifont zip artifact"
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: zip-x11-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.zip

      - name: "4a: Make TUI zip"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ./src
        run: |
          make clean
          find . -iname '*.zip' -delete -print
          USE_TUI=1 make all package

      - name: "4b: Upload TUI zip artifact"
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: zip-tui-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            **/*.zip

      # disabled because DMG create fails intermittently: https://github.com/actions/runner-images/issues/7522
      # - name: Unzip app
      #   run: unzip -o *.zip

      # - name: Create DMG
      #   if: false
      #   run: |
      #     create-dmg --volname "${{ env.APPNAME }}" --volicon src/misc/usbimager.icns --eula LICENSE  --app-drop-link 50 50 "${{ env.APPNAME }}-${{ env.TAG }}.dmg" "${{ env.APPNAME }}.app"

      # - name: Upload Artifacts DMG
      #   if: false
      #   uses: actions/upload-artifact@v4
      #   with:
      #     overwrite: true
      #     # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
      #     # branch name: ${{ github.ref_name }}
      #     name: DMG-${{ env.APPNAME }}-${{ matrix.os }}-${{ github.sha }}
      #     path: |
      #       **/*.dmg

  build-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: mingw32, env: i686 }
      fail-fast: false    
    defaults:
      run:
        shell: bash
    steps:
      - uses: msys2/setup-msys2@v2

        with:
          update: true
          msystem: ${{ matrix.sys}}
          install: >-
            base-devel
            gcc
            make
            mingw-w64-${{matrix.env}}-binutils
            mingw-w64-${{matrix.env}}-crt-git
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-gcc-libs
            mingw-w64-${{matrix.env}}-gmp
            mingw-w64-${{matrix.env}}-headers-git
            mingw-w64-${{matrix.env}}-isl
            mingw-w64-${{matrix.env}}-libiconv
            mingw-w64-${{matrix.env}}-libwinpthread-git
            mingw-w64-${{matrix.env}}-make
            mingw-w64-${{matrix.env}}-mpc
            mingw-w64-${{matrix.env}}-mpfr
            mingw-w64-${{matrix.env}}-windows-default-manifest
            mingw-w64-${{matrix.env}}-winpthreads-git
            msys2-runtime-devel
            msys2-w32api-headers
            msys2-w32api-runtime
            unzip
            zip
            zlib
            zlib-devel
            
      - name: Checkout full repo with all tags and history
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
          
      - name: print env
        run: env

      - name: Build
        working-directory: src
        shell: msys2 {0}
        run: make package
          
      - name: List files
        run: |
          pwd
          echo ${{ github.workspace }}
          ls -alh 
          find .
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APPNAME }}-${{ matrix.sys}}-${{matrix.env}}
          path: '**/*.zip'
      
  release:
    if: github.event.inputs.skip_release != 'y'
    needs: [build_mac_linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.custom_ref || 'master'}}
          fetch-depth: 0
          fetch-tags: true
          
      - name: set vars
        id: envconf
        run: |
          echo "TAG=$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV
          
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        
        with:
          path: /tmp/download
          merge-multiple: true
          
      - name: List artifacts
        run: |
          echo "custom tag: ${{ github.event.inputs.custom_ref }}"
          echo "git tag: ${{ env.TAG}}"
          echo "PWD=$PWD"
          ls -alh ${{ steps.download-artifact.outputs.download-path }}
          find ${{ steps.download-artifact.outputs.download-path }}
          
      - name: make release
        uses: ncipollo/release-action@v1
        with:
          body: "- Automated builds mirrored from source repository at [${{ github.event.repository.name }}](https://gitlab.com/bztsrc/usbimager)"
          artifacts: ${{ steps.download-artifact.outputs.download-path }}/**/*.*
          replacesArtifacts: true
          generateReleaseNotes: true
          makeLatest: true
          allowUpdates: true
          tag: ${{ github.event.inputs.custom_ref || env.TAG}}
            


        
